{
  "documentation": [
    {
      "id": 1,
      "text": "Что такое Бизнес-требование?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Высокоуровневая бизнес-цель организации или заказчиков системы", "isCorrect": true },
        { "id": 2, "text": "Описание требуемого поведения системы в определенных условиях", "isCorrect": false },
        { "id": 3, "text": "Задача, которую определенные классы пользователей должны иметь возможность выполнять в системе", "isCorrect": false },
        { "id": 4, "text": "Требование к бизнесу, применяемое регуляторами", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Что из перечисленного - нефункциональное требование?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Рядом с именем пользователя должна отображаться его аватарка", "isCorrect": false },
        { "id": 2, "text": "Поиск курьера должен занимать не более 1 минуты", "isCorrect": true },
        { "id": 3, "text": "Корзина товаров заказа должна сбрасываться при смене пользователя", "isCorrect": false },
        { "id": 4, "text": "После регистрации пользователь должен подтвердить телефон через SMS", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Что относится к функциональным требованиям?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Платежи в системе должны обрабатываться в соответствии со стандартом PCI DSS", "isCorrect": false },
        { "id": 2, "text": "Результаты поиска должны загружаться за 3 секунды", "isCorrect": false },
        { "id": 3, "text": "Система должна позволять пользователям просматривать каталоги одежды", "isCorrect": true },
        { "id": 4, "text": "Время простоя в работе системы не должно превышать 15 минут в сутки", "isCorrect": false },
        { "id": 5, "text": "Вероятность сбоя при обращении к функциям системы не должно превышать 3%", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Какой способ записи требований соответствует следующему утверждению: Как клиент банка, я хочу получать смс-уведомления по каждой совершенной покупке, для того, чтобы видеть остаток по своему счету на карте?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Use Case", "isCorrect": false },
        { "id": 2, "text": "User Story", "isCorrect": true },
        { "id": 3, "text": "Job Story", "isCorrect": false },
        { "id": 4, "text": "Tech Story", "isCorrect": false },
        { "id": 5, "text": "Scenario", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Что такое Use Case?",
      "hasOptions": false,
      "answer": "Use Case (сценарий использования) – это метод описания взаимодействия пользователя (или другого актора) с системой для достижения определённой конкретной цели. Проще говоря, Use Case описывает, кто и что делает с системой (или что система делает в ответ), чтобы пользователь получил нужный результат. Например: 1.Пользователь нажимает кнопку (Добавить в корзину) 2.Система добавляет выбранный товар в корзину и отображает индикатор количества товаров​ 3.Пользователь переходит в корзину 4.Система открывает страницу корзины с добавленным товаром."
    },
    {
      "id": 6,
      "text": "Что такое User Story?",
      "hasOptions": false,
      "answer": "User Story, или пользовательская история, помогает увидеть функции продукта глазами конечного потребителя. Основную часть User Story пишут кратко, без технических деталей и лишних подробностей. Главное — сделать фокус на целях и потребностях людей. В основной части User Story обычно указывают: категорию, к которой относится пользователь; действие, которое он или она хотели бы совершить; результат, который ожидает получить пользователь после действия. В историю обязательно включают критерии приёмки — условия, которые должны быть выполнены, чтобы история считалась завершённой."
    },
    {
      "id": 7,
      "text": "Что значит DoD (Definition of Done)?",
      "hasOptions": false,
      "answer": "Это набор критериев, которые определяют, когда инкремент готов к началу разработки. Иначе говоря, это описание того, что должно быть выполнено прежде, чем задача будет взята в работу. DoR применяется к пользовательским и техническим историям, эпикам, задачам, спринтам, релизам и любым другим инкрементам. Формулирование критериев DoR обычно происходит на ранних этапах планирования проекта. К процессу могут быть привлечены любые участники команды разработки, представители заказчика и пользователи продукта."
    },
    {
      "id": 8,
      "text": "Что значит DoR (Definition of Ready)?",
      "hasOptions": false,
      "answer": "Критерии готовности к работе или DoR – это набор условий, которые должны быть выполнены перед взятием в работу определённой задачи. Инструмент используется в команде Scrum, обеспечивая подготовку задачи к выполнению. Проще говоря, команда заранее знает, что нужно для успешной реализации. Такой подход избавляет от неопределенности, позволяя сосредоточиться на выполнении задания."
    },
    {
      "id": 9,
      "text": "Какой способ записи требований соответствует следующему шаблону - Когда , я хочу , чтобы ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Use Case", "isCorrect": false },
        { "id": 2, "text": "Job Story", "isCorrect": false },
        { "id": 3, "text": "Scenario", "isCorrect": false },
        { "id": 4, "text": "User Story", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Что значит DoR (Definition of Ready) в методологии гибкой разработки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Критерии готовности задачи к взятию в работу", "isCorrect": true },
        { "id": 2, "text": "Список условий к процессу, инкременту при выполнении которых элемент бэклога может считаться готовым", "isCorrect": false },
        { "id": 3, "text": "Это критерии приемки", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Выберите пример, соответствующий нефункциональному требованию:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Создать сайт продаж", "isCorrect": false },
        { "id": 2, "text": "Увеличить продажи товаров онлайн на 90% , результатом чего должно быть создание интернет-магазин", "isCorrect": false },
        { "id": 3, "text": "Пользователь должен иметь возможность зарегистрироваться на сайте", "isCorrect": false },
        { "id": 4, "text": "Система должна предоставлять возможность зарегистрироваться на сайте", "isCorrect": false },
        { "id": 5, "text": "Все элементы интерфейса должны быть локализованы на рус. язык и быть доступными для аудитории из РФ", "isCorrect": true }
      ]
    },
    {
      "id": 12,
      "text": "Какой тип атрибута качества соответствует формулировке: «Система должна заблокировать учетную запись пользователя после четырех неудачных попыток входа в систему за пять минут» ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Целостность", "isCorrect": false },
        { "id": 2, "text": "Устойчивость", "isCorrect": false },
        { "id": 3, "text": "Безопасность", "isCorrect": true },
        { "id": 4, "text": "Удобство установки", "isCorrect": false },
        { "id": 5, "text": "Доступность", "isCorrect": false },
        { "id": 6, "text": "Производительность", "isCorrect": false },
        { "id": 7, "text": "Надежность", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Какой тип атрибута качества соответствует формулировке: «Необученный пользователь должен суметь выполнить начальную установку приложения в среднем за 10 минут.» ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Целостность", "isCorrect": false },
        { "id": 2, "text": "Устойчивость", "isCorrect": false },
        { "id": 3, "text": "Безопасность", "isCorrect": false },
        { "id": 4, "text": "Удобство установки", "isCorrect": true },
        { "id": 5, "text": "Доступность", "isCorrect": false },
        { "id": 6, "text": "Производительность", "isCorrect": false },
        { "id": 7, "text": "Надежность", "isCorrect": false }
      ]
    }
  ],
  "other": [
    {
      "id": 1,
      "text": "Выберите диаграмму, которой нет в UML",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Диаграмма классов (Class diagram)", "isCorrect": false },
        { "id": 2, "text": "Диаграмма последовательности (Sequence diagram)", "isCorrect": false },
        { "id": 3, "text": "Диаграмма активностей (Activity diagram)", "isCorrect": false },
        { "id": 4, "text": "Диаграмма объектов (Object diagram)", "isCorrect": false },
        { "id": 5, "text": "ER-диаграмма", "isCorrect": true }
      ]
    },
    {
      "id": 2,
      "text": "Когда следует использовать Waterfall model вместо Scrum?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Если требование простое и конкретное, мы должны использовать модель водопада вместо Scrum", "isCorrect": true },
        { "id": 2, "text": "Когда предвидится много изменений на проекте", "isCorrect": false },
        { "id": 3, "text": "Когда у заказчика большой бюджет", "isCorrect": false },
        { "id": 4, "text": "Когда нужно часто вносить изменения на проекте", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Какие роли существуют в Scrum?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Скрам-мастер, владелец продукта, проджет-менеджер", "isCorrect": false },
        { "id": 2, "text": "Владелец продукта, проджект-менеджер, команда", "isCorrect": false },
        { "id": 3, "text": "Скрам-мастер, владелец продукта, команда", "isCorrect": true }
      ]
    },
    {
      "id": 4,
      "text": "Какая диаграмма UML наглядно описывает движение потока управления между взаимодействующими узлами?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Диаграмма развертывания", "isCorrect": false },
        { "id": 2, "text": "Диаграмма компонентов", "isCorrect": false },
        { "id": 3, "text": "Диаграмма композитной структуры", "isCorrect": false },
        { "id": 4, "text": "Диаграмма обзора взаимодействия", "isCorrect": true },
        { "id": 5, "text": "Диаграмма коммуникации", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Что такое MVP в методологии Customer Development?",
      "hasOptions": false,
      "answer": "MVP (minimal viable product) — минимально жизнеспособный продукт. Это версия продукта, которая уже выполняет основную функцию, но ещё не идеальна."
    },
    {
      "id": 6,
      "text": "Что такое критерии приемлимости (acceptance criteria)?",
      "hasOptions": false,
      "answer": "Критерии приемки — это неоправданно расплывчатое название набора шагов, которые описывают, как пользователь может взаимодействовать с конкретной функцией. Они написаны в формате, использующем шаги Given, When, и Then , и сопоставлены с действиями пользователя. Благодаря этому их легко преобразовать в поведенческие тесты. Разработка функции таким образом также является отличным способом выявления других вещей, которые могут понадобиться для ее работы."
    },
    {
      "id": 7,
      "text": "Выберите все уровни, соответствующие модели C4 архитектуры программного обеспечения:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Контекст-диаграмма, Контейнер-диаграмма, Компонент-диаграмма, Диаграмма кода", "isCorrect": true },
        { "id": 2, "text": "Контекст-диаграмма, Контейнер-диаграмма, Сиквенс-диаграмма, Диаграмма кода", "isCorrect": false },
        { "id": 3, "text": "Контекст-диаграмма, диаграмма потока данных, Компонент-диаграмма, Диаграмма кода", "isCorrect": false },
        { "id": 4, "text": "Контекст-диаграмма, Контейнер-диаграмма, Компонент-диаграмма, Диаграмма сценария использования", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Что такое TCP/IP",
      "hasOptions": false,
      "answer": "Модель TCP/IP — это стек протоколов, которые задают правила передачи данных по Сети. Так как бал здесь правят протоколы TCP и IP, в честь них и назвали всю модель. TCP (Transmission Control Protocol) отвечает за обмен данными. Он управляет их отправкой и следит за тем, чтобы они дошли до получателя в целости. У TCP есть свои гарантии, что всё пройдёт успешно, — о них чуть позже. IP (Internet Protocol) отвечает за адресацию. Его задача — связывать друг с другом устройства и нарезать данные на пакеты для удобной отправки. Чтобы протокол мог быстро найти дорогу от одного компьютера к другому, придумали IP-адреса — уникальные идентификаторы, которые есть у каждого устройства в Сети. Сначала IP определяет расположение сервера — или, точнее сказать, его IP-адрес. Чтобы найти нужный «айпишник», протокол использует систему DNS. Это такая глобальная база данных, где доменные имена сайтов лежат напротив их IP-адресов — например, сайту romashka.ru соответствует IP-адрес 178.248.237.96. Когда IP найдёт сервер и получит от него нужную страницу, он начнёт разбивать её на пакеты. Каждый пакет — это часть файла размером от 1 до 64 КБ. Внутри находятся сами данные и служебная информация: номер пакета, адреса отправителя и получателя и другое. Чтобы пакеты без потерь долетали от сервера к пользователю, подключается протокол TCP. Для этого в него зашили механизм подтверждения: когда сервер отправляет пакет, TCP спрашивает у устройства пользователя, нормально ли он добрался. Если ответ «да», протокол отправляет следующую порцию, если «нет» — пробует ещё раз. После того как все пакеты получены, браузер собирает из них цельную страницу и выводит на экран."
    },
    {
      "id": 9,
      "text": "Какая модель облачных услуг предоставляет готовые к работе программы, настроенные на решение ваших задач?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "IaaS (Infrastructure as a Service)", "isCorrect": false },
        { "id": 2, "text": "PaaS (Platform as a Service)", "isCorrect": false },
        { "id": 3, "text": "SaaS (Sofrware as a Service)", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Как называется строка символов, которая используется для идентификации какого-либо ресурса по его адресу или по его имени, либо по тому и тому вместе, например — https://wiki.merionet.ru/images/vse-chto-vam-nuzhno-znat-pro-devops/1.png?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "URN (Uniform Resource Name)", "isCorrect": false },
        { "id": 2, "text": "URL (Uniform Resource Locator)", "isCorrect": false },
        { "id": 3, "text": "URI (Uniform Resource Identifier)", "isCorrect": true }
      ]
    },
    {
      "id": 11,
      "text": "Как называется строка символов, которая используется для идентификации какого-либо ресурса, но только по его адресу, по его местоположению, например, https://wiki.merionet.ru ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "URN (Uniform Resource Name)", "isCorrect": false },
        { "id": 2, "text": "URL (Uniform Resource Locator)", "isCorrect": true },
        { "id": 3, "text": "URI (Uniform Resource Identifier)", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какая архитектура помогает снизить задержку в распределенных системах?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Монолитная", "isCorrect": false },
        { "id": 2, "text": "Микросервисная", "isCorrect": true },
        { "id": 3, "text": "Клиент-сервер", "isCorrect": false },
        { "id": 4, "text": "Децентрализованная", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Когда необходимо горизонтальное масштабирование?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Когда ресурсы одного сервера исчерпаны", "isCorrect": true },
        { "id": 2, "text": "Когда надо увеличить производительность одного сервера", "isCorrect": false },
        { "id": 3, "text": "Когда надо уменьшить нагрузку на сеть", "isCorrect": false },
        { "id": 4, "text": "Когда нужно сократить трафик", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Какую проблему решает масштабируемость?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Увеличение нагрузки", "isCorrect": true },
        { "id": 2, "text": "Уменьшение затрат на разработку", "isCorrect": false },
        { "id": 3, "text": "Поддержка старых технологий", "isCorrect": false },
        { "id": 4, "text": "Улучшение пользовательского интерфейса", "isCorrect": false }
      ]
    },
    {
      "id": 15,
      "text": "Что такое HTTP",
      "hasOptions": false,
      "answer": "HTTP — широко распространённый протокол передачи данных, изначально предназначенный для передачи гипертекстовых документов (то есть документов, которые могут содержать ссылки, позволяющие организовать переход к другим документам). Аббревиатура HTTP расшифровывается как HyperText Transfer Protocol, «протокол передачи гипертекста». В соответствии со спецификацией OSI, HTTP является протоколом прикладного (верхнего, 7-го) уровня. Актуальная на данный момент версия протокола, HTTP 1.1, описана в спецификации RFC 2616. Протокол HTTP предполагает использование клиент-серверной структуры передачи данных. Клиентское приложение формирует запрос и отправляет его на сервер, после чего серверное программное обеспечение обрабатывает данный запрос, формирует ответ и передаёт его обратно клиенту. После этого клиентское приложение может продолжить отправлять другие запросы, которые будут обработаны аналогичным образом. Задача, которая традиционно решается с помощью протокола HTTP — обмен данными между пользовательским приложением, осуществляющим доступ к веб-ресурсам (обычно это веб-браузер) и веб-сервером. На данный момент именно благодаря протоколу HTTP обеспечивается работа Всемирной паутины. Также HTTP часто используется как протокол передачи информации для других протоколов прикладного уровня, таких как SOAP, XML-RPC и WebDAV. В таком случае говорят, что протокол HTTP используется как «транспорт». API многих программных продуктов также подразумевает использование HTTP для передачи данных — сами данные при этом могут иметь любой формат, например, XML или JSON. Как правило, передача данных по протоколу HTTP осуществляется через TCP/IP-соединения. Серверное программное обеспечение при этом обычно использует TCP-порт 80 (и, если порт не указан явно, то обычно клиентское программное обеспечение по умолчанию использует именно 80-й порт для открываемых HTTP-соединений), хотя может использовать и любой другой."
    },
    {
      "id": 16,
      "text": "Какой шлюз в BPMN определяет выбор только одного пути?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Exclusive Gateway", "isCorrect": true },
        { "id": 2, "text": "Inclusive Gateway", "isCorrect": false },
        { "id": 3, "text": "Parallel Gateway", "isCorrect": false }
      ]
    }
  ],
  "integration": [
    {
      "id": 1,
      "text": "В каких случаях нужно использовать POST вместо GET для поиска или получения информации?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "При передаче чувствительных или конфиденциальных данных", "isCorrect": true },
        { "id": 2, "text": "Для запроса данных по конкретному идентификатору ресурса", "isCorrect": false },
        { "id": 3, "text": "Если формируемый URI меньше 2048 символов", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Идемпотентность - это свойство объекта или операции в котором при повторном применении операции к объекту?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "возвращается тот же результат, что и при первом вызове", "isCorrect": true },
        { "id": 2, "text": "возвращается результат, отличный от первого вызова", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Что такое HTTP-куки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Вид печенек", "isCorrect": false },
        { "id": 2, "text": "Большой фрагмент данных, который сервер отправляет браузеру пользователя", "isCorrect": false },
        { "id": 3, "text": "Небольшой фрагмент данных, который сервер отправляет браузеру пользователя", "isCorrect": true },
        { "id": 4, "text": "Небольшой фрагмент данных, который браузер пользователя отправляет серверу", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Что такое REST?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Архитектурный стиль, который осуществляет реализацию клиента и сервера независимо друг от друга", "isCorrect": true },
        { "id": 2, "text": "Протокол для обмена структурированной информацией при реализации веб-сервисов в компьютерных сетях", "isCorrect": false },
        { "id": 3, "text": "База данных, используемая для хранения информации о клиентах и сервера", "isCorrect": false },
        { "id": 4, "text": "Язык программирования для создания веб-сервисов", "isCorrect": false },
        { "id": 5, "text": "Протокол для передачи файлов между сервером и клиентом", "isCorrect": false },
        { "id": 6, "text": "Аббревиатура, расшифровывающася как 'Remote Enterprise Service Technology'", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Что такое Swagger?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Фреймворк для спецификации REST API", "isCorrect": true },
        { "id": 2, "text": "Протокол передачи данных", "isCorrect": false },
        { "id": 3, "text": "Язык описания веб-сервисов и доступа к ним, основанный на языке XML", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Выберите отличие XML от XSD",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "XSD - это язык программирования, а XML - это формат документа", "isCorrect": false },
        { "id": 2, "text": "XSD - это язык разметки, а XML определяет структуру и форматирование документа", "isCorrect": false },
        { "id": 3, "text": "XML - язык разметки, а XSD основан на XML и определяет структуру, форматирует представление XML", "isCorrect": true },
        { "id": 4, "text": "XML и XSD - это одно и то же", "isCorrect": false }
      ]
    },
    {
      "id": 7,
      "text": "Что такое WSDL?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Фреймворк для спецификации REST API", "isCorrect": false },
        { "id": 2, "text": "Язык описания веб-сервисов и доступа к ним, основанный на языке XML", "isCorrect": true },
        { "id": 3, "text": "Протокол передачи данных", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Как сделать POST для создания заказа идемпотентным?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Добавить в тело запроса вид операции, которую мы хотим выполнить", "isCorrect": false },
        { "id": 2, "text": "Блокировать операцию, если hash операции совпадает с какой-то записью в БД", "isCorrect": false },
        { "id": 3, "text": "Добавить ключ/токен идемпотентности", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Какой HTTP-метод выполняет вызов возвращаемого тестового сообщения с ресурса?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "GET", "isCorrect": false },
        { "id": 2, "text": "OPTIONS", "isCorrect": false },
        { "id": 3, "text": "POST", "isCorrect": false },
        { "id": 4, "text": "TRACE", "isCorrect": true },
        { "id": 5, "text": "DELETE", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Что из перечисленного в общем смысле является видами API?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "SOAP, REST, gRPc, GraphQL", "isCorrect": true },
        { "id": 2, "text": "SOAP, REST, gRPC, ESB", "isCorrect": false },
        { "id": 3, "text": "SOAP, REST, ESB, Thrift", "isCorrect": false },
        { "id": 4, "text": "SOAP, REST, GraphQL, ESB", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какой метод http-запроса заменяет все текущие представления ресурса данными запроса?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "POST", "isCorrect": false },
        { "id": 2, "text": "PUT", "isCorrect": true },
        { "id": 3, "text": "PATCH", "isCorrect": false },
        { "id": 4, "text": "OPTIONS", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "определение API (Application Programming Interface)",
      "hasOptions": false,
      "answer": "API (англ. application programming interface — программный интерфейс приложения) — это набор способов и правил, по которым различные программы общаются между собой и обмениваются данными.Все эти взаимодействия происходят с помощью функций, классов, методов, структур, а иногда констант одной программы, к которой обращаются другие. Это основной принцип работы API."
    },
    {
      "id": 13,
      "text": "Какой длины может быть GET-запрос?",
      "hasOptions": false,
      "answer": "При использовании метода GET можно использовать не более 2048 символов за вычетом количества символов в фактическом пути. Однако метод POST не ограничивается размером URL-адреса для отправки пар 'имя-значение'."
    },
    {
      "id": 14,
      "text": "Основополагающие принципы REST?",
      "hasOptions": false,
      "answer": "Всего в REST есть шесть требований к проектированию API. Пять из них обязательные, одно — опциональное: \n Клиент-серверная модель (client-server model).\nОтсутствие состояния (statelessness).\nКэширование (cacheability).\nЕдинообразие интерфейса (uniform interface).\nМногоуровневая система (layered system).\nКод по требованию (code on demand) — необязательно`"
    },
    {
      "id": 15,
      "text": "Какой метод http-запроса используется для частичного изменения ресурса?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "POST", "isCorrect": false },
        { "id": 2, "text": "PUT", "isCorrect": false },
        { "id": 3, "text": "PATCH", "isCorrect": true },
        { "id": 4, "text": "DELETE", "isCorrect": false }
      ]
    },
    {
      "id": 16,
      "text": "Какой метод http-запроса используется для описания параметров соединения с ресурсом?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "GET", "isCorrect": false },
        { "id": 2, "text": "HEAD", "isCorrect": false },
        { "id": 3, "text": "OPTIONS", "isCorrect": true },
        { "id": 4, "text": "CONNECT", "isCorrect": false },
        { "id": 5, "text": "POST", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Что такое WSDL?",
      "hasOptions": false,
      "answer": "WSDL (англ. Web Services Description Language) — язык описания веб-сервисов и доступа к ним, основанный на языке XML. Получив ссылку на WSDL сервер, мы можем запросить от него документ на языке XML, который будет содержать в себе описание всех методов доступа к сервису(запросов), их переменных и свойств, типов запросов, также в нем будут описаны параметры ответов и их содержание. Можно сказать, что WSDL это и есть та самая документация, описывающая то, как работать с API сервиса, но есть единственное — но, описание это дается на языке XML, и вникать в его код, открыв документ в редакторе, становиться очень сложной, порою, непосильной задачей. Поэтому, для изучения описания методов работы с API, используется специальный инструмент SoapUI. Особенность WSDL сервера, состоят в том, что он имеет двойное назначение(в отличии например от REST выполняющего только функцию обмена данными в обе стороны, или в одну работая асинхронно), во первых он передает нам(на языке XML) описание(документацию) о том как взаимодействовать с ним, а во вторых он же позволяет нам обмениваться с ним сообщениями, оформленными по правилам этой самой документации. Также в отличии от REST(если вы раньше с ним работали), WSDL имеет одну точку входа(один единственный адрес сервера и URL, у REST на каждый запрос свой URL)."
    },
    {
      "id": 18,
      "text": "Какой код ответа HTTP возвращается, если мы говорим про процедуру Авторизации и у пользователя нет прав доступа к ресурсу?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "400 Bad Request", "isCorrect": false },
        { "id": 2, "text": "403 Forbidden", "isCorrect": false },
        { "id": 3, "text": "401 Unauthorized", "isCorrect": true },
        { "id": 4, "text": "404 Not Found", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Какой код ответа HTTP возвращается, если не пройдена процедура Аутентификации?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "400 Bad Request", "isCorrect": false },
        { "id": 2, "text": "403 Forbidden", "isCorrect": false },
        { "id": 3, "text": "401 Unauthorized", "isCorrect": true },
        { "id": 4, "text": "404 Not Found", "isCorrect": false }
      ]
    },
    {
      "id": 20,
      "text": "что такое OAuth?",
      "hasOptions": false,
      "answer": "OAuth - протокол авторизации, позволяющий выдать одному сервису (приложению) права на доступ к ресурсам пользователя на другом сервисе. Протокол избавляет от необходимости доверять приложению логин и пароль, а также позволяет выдавать ограниченный набор прав, а не все сразу. Результатом авторизации является access token — некий ключ (обычно просто набор символов), предъявление которого является пропуском к защищенным ресурсам. Обращение к ним в самом простом случае происходит по HTTPS с указанием в заголовках или в качестве одного из параметров полученного access token'а."
    },
    {
      "id": 21,
      "text": "Какой формат данных используется в протоколе SOAP?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "TXT", "isCorrect": false },
        { "id": 2, "text": "JSON", "isCorrect": false },
        { "id": 3, "text": "XML", "isCorrect": true },
        { "id": 4, "text": "YAML", "isCorrect": false },
        { "id": 5, "text": "Parquet", "isCorrect": false }
      ]
    },
    {
      "id": 22,
      "text": "Какой метод http-запроса настраивает туннель с сервером, определенным по ресурсу?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "POST", "isCorrect": false },
        { "id": 2, "text": "OPTIONS", "isCorrect": false },
        { "id": 3, "text": "TRACE", "isCorrect": false },
        { "id": 4, "text": "CONNECT", "isCorrect": true },
        { "id": 5, "text": "HEAD", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Какой вариант ответа соответствует применению Kafka в интеграции приложений?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Обработка и анализ логов", "isCorrect": false },
        { "id": 2, "text": "Потоковая передача данных в рекомендательных системах", "isCorrect": false },
        { "id": 3, "text": "Системный мониторинг и оповещение", "isCorrect": false },
        { "id": 4, "text": "Сбор данных об изменениях", "isCorrect": false },
        { "id": 5, "text": "Миграция системы", "isCorrect": false },
        { "id": 6, "text": "Асинхронный обмен сообщений", "isCorrect": true },
        { "id": 7, "text": "Все ответы верны", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "В чем отличие XML от XSD?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "XML и XSD это одно и то же", "isCorrect": false },
        { "id": 2, "text": "XSD - это язык программирования, а XML - это формат документа", "isCorrect": false },
        { "id": 3, "text": "XSD - это формат разметки, а XML определяет структуру и форматирование документа", "isCorrect": false },
        { "id": 4, "text": "XML - язык разметки, а XSD основан на XML и определяет структуру, форматирует XML-представление", "isCorrect": true }
      ]
    },
    {
      "id": 25,
      "text": "Что такое WSDL?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Протокол для передачи сообщений другим хостам без проверки ошибок и их исправления", "isCorrect": false },
        { "id": 2, "text": "Язык описания веб-сервисов и доступа к ним, основанный на языке XML", "isCorrect": true },
        { "id": 3, "text": "Фреймворк спецификации REST API", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "Что НЕ является лучшими практиками создания REST API?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "для отправки и получение данных использование формата JSON", "isCorrect": false },
        { "id": 2, "text": "употребление глаголов в endpoints, а не существительных", "isCorrect": false },
        { "id": 3, "text": "использование фильтрации, сортировки и пагинации для получения запрошенных данных", "isCorrect": false },
        { "id": 4, "text": "использование версионности АПИ", "isCorrect": false },
        { "id": 5, "text": "использование множественного числа для описания ресурсов", "isCorrect": false },
        { "id": 6, "text": "использование принципа Statefull", "isCorrect": true },
        { "id": 7, "text": "использование кеширования", "isCorrect": false },
        { "id": 8, "text": "все ответы верны", "isCorrect": false }
      ]
    },
    {
      "id": 27,
      "text": "Основные принципы REST API",
      "hasOptions": false,
      "answer": "REST API строится на нескольких ключевых принципах, которые обеспечивают его эффективность и удобство в использовании. Эти принципы помогают создавать гибкие, масштабируемые и простые в поддержке веб-сервисы. 1) Клиент-серверная архитектура. REST API подразумевает чёткое разделение между клиентом и сервером. Клиент запрашивает данные, а сервер их предоставляет. Такое разделение улучшает масштабируемость системы и позволяет клиентам работать независимо от серверной логики. 2) Отсутствие состояния (stateless). Каждый запрос от клиента к серверу обрабатывается независимо от предыдущих запросов. Сервер не хранит информацию о состоянии клиента, что упрощает обработку запросов и повышает отказоустойчивость системы. 3) Кеширование. Ответы сервера могут кешироваться, чтобы снизить нагрузку на сервер и ускорить загрузку данных. REST API поддерживает механизмы кеширования, такие как HTTP-заголовки Cache-Control и ETag, которые позволяют клиентам повторно использовать ранее полученные данные. 4) Единообразие интерфейса. Все ресурсы REST API должны иметь чёткую структуру и единообразные URL-адреса. Запросы к API выполняются с использованием стандартных методов HTTP, а данные передаются в предсказуемых форматах, таких как JSON или XML. 5) Система уровней (Layered System). REST API может включать несколько уровней, таких как балансировщики нагрузки, прокси-серверы и системы аутентификации. Каждый уровень выполняет свою функцию и не зависит от других, что повышает надёжность и гибкость системы. 6) Возможность выполнения кода по требованию. Хотя этот принцип не является обязательным, REST API может поддерживать загрузку и выполнение кода на стороне клиента, например в виде скриптов или небольших программ."
    },
    {
      "id": 28,
      "text": "Выберите вариант с валидным JSON:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{ 'name': 'Alexander', 'age': 37, 'position': 'System Alalyst' }", "isCorrect": true },
        { "id": 2, "text": "{ 'name': 'Alexander' 'age': 37 'position': 'System Alalyst' }", "isCorrect": false },
        { "id": 3, "text": "{ name: 'Alexander', age: 37, position: 'System Alalyst' }", "isCorrect": false },
        { "id": 4, "text": "{ name: Alexander, age: 37, position: System Alalyst }", "isCorrect": false }
      ]
    },
    {
      "id": 29,
      "text": "Выберите вариант с валидным JSON:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{ 'name': 'Maria', 'powers': [ 'systems thinking', 'Attentiveness' ]}", "isCorrect": true },
        { "id": 2, "text": "{ 'name': 'Maria', 'powers': [ 'systems thinking', 'Attentiveness' }}", "isCorrect": false },
        { "id": 3, "text": "{ 'name': Maria, 'powers': [ 'systems thinking', 'Attentiveness' }}", "isCorrect": false },
        { "id": 4, "text": "{ 'name': 'Maria', 'powers': [ 'systems thinking' 'Attentiveness' ]} }", "isCorrect": false }
      ]
    },
    {
      "id": 30,
      "text": "Какой метод удаляет указанный ресурс?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "GET", "isCorrect": false },
        { "id": 2, "text": "POST", "isCorrect": false },
        { "id": 3, "text": "PUT", "isCorrect": false },
        { "id": 4, "text": "PATCH", "isCorrect": false },
        { "id": 5, "text": "DELETE", "isCorrect": true },
        { "id": 6, "text": "CONNECT", "isCorrect": false },
        { "id": 7, "text": "TRACE", "isCorrect": false },
        { "id": 8, "text": "OPTIONS", "isCorrect": false },
        { "id": 9, "text": "HEAD", "isCorrect": false }
      ]
    },
    {
      "id": 31,
      "text": "Какой метод используется для описания параметров соединения с ресурсом?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "GET", "isCorrect": false },
        { "id": 2, "text": "POST", "isCorrect": false },
        { "id": 3, "text": "PUT", "isCorrect": false },
        { "id": 4, "text": "PATCH", "isCorrect": false },
        { "id": 5, "text": "DELETE", "isCorrect": false },
        { "id": 6, "text": "CONNECT", "isCorrect": true },
        { "id": 7, "text": "TRACE", "isCorrect": false },
        { "id": 8, "text": "OPTIONS", "isCorrect": false },
        { "id": 9, "text": "HEAD", "isCorrect": false }
      ]
    },
    {
      "id": 32,
      "text": "Какой метод выполняет вызов возвращаемого тестового сообщения с ресурса?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "GET", "isCorrect": false },
        { "id": 2, "text": "POST", "isCorrect": false },
        { "id": 3, "text": "PUT", "isCorrect": false },
        { "id": 4, "text": "PATCH", "isCorrect": false },
        { "id": 5, "text": "DELETE", "isCorrect": false },
        { "id": 6, "text": "CONNECT", "isCorrect": false },
        { "id": 7, "text": "TRACE", "isCorrect": true },
        { "id": 8, "text": "OPTIONS", "isCorrect": false },
        { "id": 9, "text": "HEAD", "isCorrect": false }
      ]
    },
    {
      "id": 33,
      "text": "Какой метод используется для частичного изменения ресурса?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "GET", "isCorrect": false },
        { "id": 2, "text": "POST", "isCorrect": false },
        { "id": 3, "text": "PUT", "isCorrect": false },
        { "id": 4, "text": "PATCH", "isCorrect": true },
        { "id": 5, "text": "DELETE", "isCorrect": false },
        { "id": 6, "text": "CONNECT", "isCorrect": false },
        { "id": 7, "text": "TRACE", "isCorrect": false },
        { "id": 8, "text": "OPTIONS", "isCorrect": false },
        { "id": 9, "text": "HEAD", "isCorrect": false }
      ]
    },
    {
      "id": 34,
      "text": "Свойство операции, при котором многократноеее выполнение приводит к тому же результату, что и однократное — это…",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Интероперабельность", "isCorrect": false },
        { "id": 2, "text": "Идемпотентность", "isCorrect": true },
        { "id": 3, "text": "Альтернативность", "isCorrect": false },
        { "id": 4, "text": "Транзитивность", "isCorrect": false },
        { "id": 5, "text": "Дистрибутивность", "isCorrect": false },
        { "id": 6, "text": "Коммутативность", "isCorrect": false },
        { "id": 7, "text": "Ассоциативность", "isCorrect": false }
      ]
    },
    {
      "id": 35,
      "text": "Выберите отличие методов PUT от PATCH:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "PATCH является набором инструкций о том, как изменить ресурс PUT, который полностью заменяет ресурс", "isCorrect": false },
        { "id": 2, "text": "PATCH может как быть идемпотентным, так и не быть, в отличие от PUT, который всегда идемпотентен", "isCorrect": false },
        { "id": 3, "text": "PUT обычно требует больше данных для передачи- необходимо отправлять полное представление ресурса", "isCorrect": false },
        { "id": 4, "text": "Все варианты верны", "isCorrect": true }

      ]
    },
    {
      "id": 36,
      "text": "Выберете отличия методов GET от POST:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "GET — метод для получения данных с сервера", "isCorrect": false },
        { "id": 2, "text": "GET передаётся с URL, поэтому виден в адресной строке браузера или истории посещений сайтов", "isCorrect": false },
        { "id": 3, "text": "GET применяется в фильтрах поисковиков и онлайн-магазинов", "isCorrect": false },
        { "id": 4, "text": "POST — метод отправки данных на сервер, например, после заполнения формы регистрации", "isCorrect": false },
        { "id": 5, "text": "Все ответы верны", "isCorrect": true }
      ]
    },
    {
      "id": 37,
      "text": "Набор пар ключ-значение, которые идут после знака вопрос в URL-адресе, разделенные символами & — это…",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Path- параметры", "isCorrect": false },
        { "id": 2, "text": "Query- параметры", "isCorrect": true },
        { "id": 3, "text": "Body", "isCorrect": false },
        { "id": 4, "text": "Headers", "isCorrect": false }
      ]
    },
    {
      "id": 38,
      "text": "Синхронное взаимодействие",
      "hasOptions": false,
      "answer": "Синхронное взаимодействие — это блокирующее взаимодействие, при котором клиент не может продолжить выполнение работы, пока не получит ответ. Например, приложение электронной коммерции может синхронно вызывать микросервис для проверки наличия товара перед оформлением заказа."
    },
    {
      "id": 39,
      "text": "Асинхронное взаимодействие",
      "hasOptions": false,
      "answer": "Асинхронное взаимодействие — это неблокирующее взаимодействие, при котором клиент может продолжать работу после отправки запроса. 3 Ответ может быть получен позже, например, через сообщения или коллбэки. 1 Например, система обработки платежей может асинхронно отправлять запрос на обработку платежа, а затем получать ответ о статусе платежа через сообщения."
    }
  ],
  "database": [
    {
      "id": 1,
      "text": "Что такое первичный ключ (PRIMARY KEY) в реляционной базе данных?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ключ, который обеспечивает однозначную логическую связь между таблицами одной БД", "isCorrect": false },
        { "id": 2, "text": "поле или набор значений, который являются уникальными для всей таблицы", "isCorrect": true },
        { "id": 3, "text": "поле или набор значений, которые являются неуникальными для всей таблицы", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "В чем разница между командами DROP и TRUNCATE в SQL?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "DROP удаляет таблицу, и нельзя сделать Rollback команды, TRUNCATE удаляет все строки из таблицы", "isCorrect": true },
        { "id": 2, "text": "TRUNCATE удаляет таблицу, и нельзя сделать Rollback команды, DROP удаляет все строки из таблицы", "isCorrect": false },
        { "id": 3, "text": "DROP удаляет таблицу, и можно сделать Rollback команды, TRUNCATE удаляет все строки из таблицы", "isCorrect": false },
        { "id": 4, "text": "TRUNCATE удаляет таблицу, и можно сделать Rollback команды, DROP удаляет все строки из таблицы", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Какие параметры используются в конструкции ORDER BY при написании SQL-запросов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ASC", "isCorrect": false },
        { "id": 2, "text": "ASC и DESC", "isCorrect": true },
        { "id": 3, "text": "DESC", "isCorrect": false },
        { "id": 4, "text": "ASC, DESC и RESC", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Какие из операторов SQL могут быть использованы для выполнения CRUD (Create, Read, Update, Delete) операций над данными?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "INSERT, DELETE, SELECT, UPDATE", "isCorrect": true },
        { "id": 2, "text": "SELECT, BACKUP, INSERT, DELETE", "isCorrect": false },
        { "id": 3, "text": "SELECT, ALTER, UPDATE, DELETE", "isCorrect": false },
        { "id": 4, "text": "INSERT, DELETE, ALTER, UPDATE", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Какой оператор в SQL используется для изменения объектов базы данных?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "UNION", "isCorrect": false },
        { "id": 2, "text": "ALTER", "isCorrect": true },
        { "id": 3, "text": "JOIN", "isCorrect": false },
        { "id": 4, "text": "DELETE", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Выберите все агрегирующие функции SQL",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "COUNT, SUM, MAX, MIN, DISTINCT", "isCorrect": false },
        { "id": 2, "text": "COUNT, SUM, MAX, MIN, ISNULL", "isCorrect": false },
        { "id": 3, "text": "COUNT, SUM, MAX, MIN, AVG, AND", "isCorrect": false },
        { "id": 4, "text": "COUNT, SUM, MAX, MIN, AVG", "isCorrect": true }
      ]
    },
    {
      "id": 7,
      "text": "Что такое Self JOIN в SQL?",
      "hasOptions": false,
      "answer": "мощный инструмент в SQL, который позволяет соединять таблицу с самой собой для выполнения различных задач, таких как сравнение записей и нахождение связанных данных. Понимание и правильное использование SELF JOIN может значительно упростить анализ и обработку данных."
    },
    {
      "id": 8,
      "text": "В чем заключается разница между UNION и UNION ALL в SQL?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "UNION удаляет дубликаты записей, UNION ALL - объединяет без удаления дубликатов", "isCorrect": true },
        { "id": 2, "text": "UNION ALL удаляет дубликаты записей, UNION - объединяет без удаления дубликатов", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Что такое AUTO_INCREMENT в SQL?",
      "hasOptions": false,
      "answer": "Автоинкремент — это функция в базах данных, которая автоматически генерирует уникальный номер для каждой новой строки, добавленной в таблицу. Этот номер обычно используется в качестве первичного ключа для уникальной идентификации каждой строки в таблице. Система базы данных автоматически присваивает каждому новому ряду следующий доступный номер, избавляя пользователя от необходимости вручную управлять значениями первичного ключа. Это упрощает процесс добавления новых строк и гарантирует, что каждая строка имеет уникальный идентификатор."
    },
    {
      "id": 10,
      "text": "В чем отличие между типом данных CHAR и VARCHAR в SQL?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "CHAR используется для строк переменной длины, VARCHAR - для строк символов фиксированной длины", "isCorrect": false },
        { "id": 2, "text": "CHAR используется для строк фиксированной длины, VARCHAR - для строк переменной длины", "isCorrect": true },
        { "id": 3, "text": "CHAR - для строк переменной длины, VARCHAR - для строк фиксированной и переменной длины", "isCorrect": false },
        { "id": 4, "text": "отличий нет", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какой оператор в SQL часто используется с агрегатными функциями для группировки набора результатов по одному или нескольким столбцам?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ORDER BY", "isCorrect": false },
        { "id": 2, "text": "GROUP BY", "isCorrect": true },
        { "id": 3, "text": "SUM()", "isCorrect": false },
        { "id": 4, "text": "HAVING", "isCorrect": false },
        { "id": 5, "text": "JOIN", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Как из таблицы выбрать все записи с четными ID в SQL?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "SELECT * FROM table WHERE id % 2 != 0", "isCorrect": false },
        { "id": 2, "text": "SELECT * FROM table WHERE id % 2 = 0", "isCorrect": true },
        { "id": 3, "text": "SELECT * FROM table WHERE id / 2 = 0", "isCorrect": false },
        { "id": 4, "text": "SELECT * FROM table WHERE id / 2 != 0", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Что такое индекс в SQL?",
      "hasOptions": false,
      "answer": "Индекс — это структура данных, которая создаётся на основе одного или нескольких столбцов таблицы. Он ускоряет выборку строк, снижая нагрузку на базу при выполнении SELECT, JOIN, ORDER BY, WHERE и других операций. Аналогия: если таблица — это книга, то индекс — это оглавление. Вместо того чтобы читать всю книгу, вы переходите сразу к нужной странице. Вкратце, индексы создаются для повышения производительности поиска данных. Таблицы могут иметь огромное количество строк, которые хранятся в произвольном порядке. Без индекса поиск нужных строк идёт по порядку (последовательно), что на больших объемах данных отнимает много времени. Индекс - обычно один или несколько столбцов таблицы и указателей на соответствующие строки таблицы, позволяет искать строки, удовлетворяющие критерию поиска. Ускорение работы с использованием индексов достигается в первую очередь за счёт того, что индекс имеет структуру, оптимизированную под поиск — например, в MySQL b-дерева. Индекс лучше использовать на тех столбцах таблицы, на которые вы чаще всего будете накладывать условия через where column_name = ..."
    },
    {
      "id": 14,
      "text": "Какой уникальный идентификатор лучше всего подойдет для проектирования в распределенных системах — по требованию он должен быть числовой, умещается в 64 бита, упорядочен по дате ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "GUID", "isCorrect": false },
        { "id": 2, "text": "UUID", "isCorrect": false },
        { "id": 3, "text": "DB auto-increment", "isCorrect": false },
        { "id": 4, "text": "SnowflakeID", "isCorrect": true }
      ]
    },
    {
      "id": 15,
      "text": "Выберите предложение команды Select, которое позволяет устанавливать условия для агрегатных функций:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "GROUP BY", "isCorrect": false },
        { "id": 2, "text": "ORDER BY", "isCorrect": false },
        { "id": 3, "text": "HAVING", "isCorrect": true },
        { "id": 4, "text": "WHERE", "isCorrect": false }
      ]
    },
    {
      "id": 16,
      "text": "Что такое SQL?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Язык программирования", "isCorrect": false },
        { "id": 2, "text": "Лучший способ приготовить кофе", "isCorrect": false },
        { "id": 3, "text": "Язык запросов структурированных данных", "isCorrect": true },
        { "id": 4, "text": "Протокол передачи данных", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Какой запрос позволяет выбрать все записи из таблицы 'students'?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "SELECT * INTO students;", "isCorrect": false },
        { "id": 2, "text": "SELECT * FROM students;", "isCorrect": true },
        { "id": 3, "text": "INSERT INTO students SELECT *;", "isCorrect": false },
        { "id": 4, "text": "SELECT pizzas;", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Какая команда объединяет строки из двух таблиц по общему полю?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "CONCAT", "isCorrect": false },
        { "id": 2, "text": "UNION", "isCorrect": false },
        { "id": 3, "text": "DANCE TOGETHER", "isCorrect": false },
        { "id": 4, "text": "JOIN", "isCorrect": true }
      ]
    },
    {
      "id": 19,
      "text": "Что делает оператор 'DISTINCT' в запросе SELECT?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Сортирует строки", "isCorrect": false },
        { "id": 2, "text": "Удаляет дубликаты", "isCorrect": false },
        { "id": 3, "text": "Танцует вальс", "isCorrect": false },
        { "id": 4, "text": "Объединяет таблицы", "isCorrect": true }
      ]
    },
    {
      "id": 20,
      "text": "Какой запрос удалит таблицу с названием 'employees'?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "DELETE TABLE employees;", "isCorrect": false },
        { "id": 2, "text": "DROP TABLE employees;", "isCorrect": true },
        { "id": 3, "text": "REMOVE TABLE employees;", "isCorrect": false },
        { "id": 4, "text": "THROW TABLE employees OUT OF WINDOW;", "isCorrect": false }
      ]
    },
    {
      "id": 21,
      "text": "Какой тип JOIN возвращает только совпадающие строки из обеих таблиц?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "INNER JOIN", "isCorrect": true },
        { "id": 2, "text": "FULL JOIN", "isCorrect": false },
        { "id": 3, "text": "LEFT JOIN THE PARTY", "isCorrect": false },
        { "id": 4, "text": "LEFT JOIN", "isCorrect": false }
      ]
    },
    {
      "id": 22,
      "text": "Какая команда используется для создания индекса?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "INDEX", "isCorrect": false },
        { "id": 2, "text": "CREATE INDEX", "isCorrect": true },
        { "id": 3, "text": "MAKE INDEX", "isCorrect": false },
        { "id": 4, "text": "ADD INDEX", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Какой тип данных в SQL используется для хранения даты и времени?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "DATE", "isCorrect": false },
        { "id": 2, "text": "TIME", "isCorrect": false },
        { "id": 3, "text": "DATETIME", "isCorrect": false },
        { "id": 4, "text": "TIMESTAMP", "isCorrect": true }
      ]
    },
    {
      "id": 24,
      "text": "Что не так с этим запросом select id, date from Orders where seller_id = NULL;",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Все верно, запрос покажет все заказы, продавцы которых не проставлены", "isCorrect": false },
        { "id": 2, "text": "NULL нужно взять в кавычки", "isCorrect": false },
        { "id": 3, "text": "Сравнение с NULL можно проводить только с оператором IS", "isCorrect": true },
        { "id": 4, "text": "Сравнение с NULL можно проводить только с оператором ON", "isCorrect": false }
      ]
    },
    {
      "id": 25,
      "text": "Порядок выполнения операторов AND и OR следующий:",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Сначала выполняется AND, а затем OR", "isCorrect": true },
        { "id": 2, "text": "Сначала выполняется OR, а затем AND", "isCorrect": false },
        { "id": 3, "text": "Порядок выполнения операторов AND и OR зависит от того, какой операторов стоит первым", "isCorrect": false },
        { "id": 4, "text": "Операторы AND и OR выполняются одновременно", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "Что покажет следующий запрос: select DISTINCT seller_id order by seller_id from Orders;",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Уникальные ID продавцов, отсортированные по возрастанию", "isCorrect": false },
        { "id": 2, "text": "Уникальные ID продавцов, отсортированные по убыванию", "isCorrect": false },
        { "id": 3, "text": "Ничего, запрос составлен неверно, ORDER BY всегда ставится в конце запроса", "isCorrect": true },
        { "id": 4, "text": "Неотсортированные никак уникальные ID продавцов", "isCorrect": false }
      ]
    }
  ]
}
